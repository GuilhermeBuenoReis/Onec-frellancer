/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * onec
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { http } from '../client';
export type CreatePartnerBody = {
  name: string;
  cpfOrCnpj: string;
  /** @nullable */
  city: string | null;
  /** @nullable */
  state: string | null;
  /** @nullable */
  commission: number | null;
  /** @nullable */
  portal: string | null;
  /** @nullable */
  channelHead: string | null;
  /** @nullable */
  regional: string | null;
  /** @nullable */
  coordinator: string | null;
  /** @nullable */
  agent: string | null;
  /** @nullable */
  indicator: string | null;
  /** @nullable */
  contract: string | null;
  /** @nullable */
  phone: string | null;
  /** @nullable */
  email: string | null;
  /** @nullable */
  responsible: string | null;
};

export type CreatePartner201 = {
  id: string;
  name: string;
};

export type GetPartners200Item = {
  id: string;
  name: string;
  cpfOrCnpj: string;
  /** @nullable */
  city: string | null;
  /** @nullable */
  state: string | null;
  /** @nullable */
  commission: number | null;
  /** @nullable */
  portal: string | null;
  /** @nullable */
  channelHead: string | null;
  /** @nullable */
  regional: string | null;
  /** @nullable */
  coordinator: string | null;
  /** @nullable */
  agent: string | null;
  /** @nullable */
  indicator: string | null;
  /** @nullable */
  contract: string | null;
  /** @nullable */
  phone: string | null;
  /** @nullable */
  email: string | null;
  /** @nullable */
  responsible: string | null;
};

export type UpdatePartnerBody = {
  name?: string;
  cpfOrCnpj?: string;
  /** @nullable */
  city?: string | null;
  /** @nullable */
  state?: string | null;
  /** @nullable */
  commission?: number | null;
  /** @nullable */
  portal?: string | null;
  /** @nullable */
  channelHead?: string | null;
  /** @nullable */
  regional?: string | null;
  /** @nullable */
  coordinator?: string | null;
  /** @nullable */
  agent?: string | null;
  /** @nullable */
  indicator?: string | null;
  /** @nullable */
  contract?: string | null;
  /** @nullable */
  phone?: string | null;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  responsible?: string | null;
};

export type UpdatePartner200 = {
  id: string;
  name: string;
};

export type UpdatePartner404 = {
  message: string;
};

export type DeletePartner200 = {
  message: string;
};

export type DeletePartner404 = {
  message: string;
};

export type CreateDataNegotiationBody = {
  title: string;
  client: string;
  user: string;
  tags: string;
  step: string;
  status: string;
  value: number;
  partnerId: string;
  /** @nullable */
  startsDate: string | null;
  /** @nullable */
  observation: string | null;
  /** @nullable */
  averageGuide: number | null;
};

export type CreateDataNegotiation201 = {
  id: string;
  name: string;
};

export type CreateDataNegotiation400 = {
  message: string;
};

export type GetNegotiation200Item = {
  id: string;
  title: string;
  client: string;
  user: string;
  tags: string;
  /** @nullable */
  step: string | null;
  status: string;
  /** @nullable */
  value: number | null;
  /** @nullable */
  startsDate: string | null;
  /** @nullable */
  observation: string | null;
  /** @nullable */
  averageGuide: number | null;
};

export type UpdateNegotiationBody = {
  title?: string;
  client?: string;
  user?: string;
  tags?: string;
  step?: string;
  status?: string;
  value?: number;
  /** @nullable */
  startsDate?: string | null;
  /** @nullable */
  observation?: string | null;
  /** @nullable */
  averageGuide?: number | null;
};

export type UpdateNegotiation200 = {
  title: string;
};

export type UpdateNegotiation404 = {
  message: string;
};

export type DeleteNegotiation200 = {
  message: string;
};

export type DeleteNegotiation404 = {
  message: string;
};

export type CreateContractBody = {
  /** @nullable */
  city: string | null;
  client: string;
  /** @nullable */
  state: string | null;
  /** @nullable */
  cnpj: string | null;
  /** @nullable */
  sindic: string | null;
  /** @nullable */
  year: string | null;
  /** @nullable */
  matter: string | null;
  /** @nullable */
  forecast: string | null;
  /** @nullable */
  contractTotal: string | null;
  /** @nullable */
  percentage: number | null;
  /** @nullable */
  signedContract: string | null;
  /** @nullable */
  status: string | null;
  /** @nullable */
  averageGuide: number | null;
  /** @nullable */
  partner: string | null;
  /** @nullable */
  partnerCommission: number | null;
  /** @nullable */
  counter: string | null;
  /** @nullable */
  email: string | null;
};

export type CreateContract201 = {
  id: string;
  name: string;
};

export type CreateContract400 = {
  message: string;
};

export type GetContract200Item = {
  id: string;
  /** @nullable */
  city: string | null;
  client: string;
  /** @nullable */
  state: string | null;
  /** @nullable */
  cnpj: string | null;
  /** @nullable */
  sindic: string | null;
  /** @nullable */
  year: string | null;
  /** @nullable */
  matter: string | null;
  /** @nullable */
  forecast: string | null;
  /** @nullable */
  contractTotal: string | null;
  /** @nullable */
  percentage: number | null;
  /** @nullable */
  signedContract: string | null;
  /** @nullable */
  status: string | null;
  /** @nullable */
  averageGuide: number | null;
  /** @nullable */
  partner: string | null;
  /** @nullable */
  partnerCommission: number | null;
  /** @nullable */
  counter: string | null;
  /** @nullable */
  email: string | null;
};

export type UpdateContractBody = {
  /** @nullable */
  city?: string | null;
  client?: string;
  /** @nullable */
  state?: string | null;
  /** @nullable */
  cnpj?: string | null;
  /** @nullable */
  sindic?: string | null;
  /** @nullable */
  year?: string | null;
  /** @nullable */
  matter?: string | null;
  /** @nullable */
  forecast?: string | null;
  /** @nullable */
  contractTotal?: string | null;
  /** @nullable */
  percentage?: number | null;
  /** @nullable */
  signedContract?: string | null;
  /** @nullable */
  status?: string | null;
  /** @nullable */
  averageGuide?: number | null;
  /** @nullable */
  partner?: string | null;
  /** @nullable */
  partnerCommission?: number | null;
  /** @nullable */
  counter?: string | null;
  /** @nullable */
  email?: string | null;
};

export type UpdateContract200 = {
  message: string;
};

export type UpdateContract404 = {
  message: string;
};

export type DeleteContract200 = {
  message: string;
};

export type DeleteContract404 = {
  message: string;
};

export type AuthenticateUserBody = {
  email: string;
  password: string;
};

export type AuthenticateUser200 = {
  token: string;
};

export type AuthenticateUser401 = {
  error: string;
};

export type GetProfileUser200Item = {
  id: string;
  email: string;
  role: string;
};

export type GetProfileUser400 = {
  message: string;
};

export type UpdateUserBody = {
  email?: string;
  /** @minLength 6 */
  password?: string;
  role?: string;
};

export type UpdateUser200 = {
  message: string;
};

export type UpdateUser400 = {
  message: string;
};

export type DeleteUser200 = {
  message: string;
};

export type DeleteUser400 = {
  message: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Create a new partner
 */
export const createPartner = (
    createPartnerBody: CreatePartnerBody,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<CreatePartner201>(
      {url: `http://localhost:3333/partners`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPartnerBody, signal
    },
      options);
    }
  


export const getCreatePartnerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPartner>>, TError,{data: CreatePartnerBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof createPartner>>, TError,{data: CreatePartnerBody}, TContext> => {
    
const mutationKey = ['createPartner'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPartner>>, {data: CreatePartnerBody}> = (props) => {
          const {data} = props ?? {};

          return  createPartner(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePartnerMutationResult = NonNullable<Awaited<ReturnType<typeof createPartner>>>
    export type CreatePartnerMutationBody = CreatePartnerBody
    export type CreatePartnerMutationError = unknown

    export const useCreatePartner = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPartner>>, TError,{data: CreatePartnerBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof createPartner>>,
        TError,
        {data: CreatePartnerBody},
        TContext
      > => {

      const mutationOptions = getCreatePartnerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Get a list of partners
 */
export const getPartners = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<GetPartners200Item[]>(
      {url: `http://localhost:3333/partners`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPartnersQueryKey = () => {
    return [`http://localhost:3333/partners`] as const;
    }

    
export const getGetPartnersQueryOptions = <TData = Awaited<ReturnType<typeof getPartners>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartners>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPartnersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPartners>>> = ({ signal }) => getPartners(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPartners>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPartnersQueryResult = NonNullable<Awaited<ReturnType<typeof getPartners>>>
export type GetPartnersQueryError = unknown


export function useGetPartners<TData = Awaited<ReturnType<typeof getPartners>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartners>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartners>>,
          TError,
          Awaited<ReturnType<typeof getPartners>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPartners<TData = Awaited<ReturnType<typeof getPartners>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartners>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPartners>>,
          TError,
          Awaited<ReturnType<typeof getPartners>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPartners<TData = Awaited<ReturnType<typeof getPartners>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartners>>, TError, TData>>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPartners<TData = Awaited<ReturnType<typeof getPartners>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPartners>>, TError, TData>>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPartnersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update a partner
 */
export const updatePartner = (
    id: string,
    updatePartnerBody: UpdatePartnerBody,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<UpdatePartner200>(
      {url: `http://localhost:3333/partners/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePartnerBody
    },
      options);
    }
  


export const getUpdatePartnerMutationOptions = <TError = UpdatePartner404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePartner>>, TError,{id: string;data: UpdatePartnerBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePartner>>, TError,{id: string;data: UpdatePartnerBody}, TContext> => {
    
const mutationKey = ['updatePartner'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePartner>>, {id: string;data: UpdatePartnerBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updatePartner(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePartnerMutationResult = NonNullable<Awaited<ReturnType<typeof updatePartner>>>
    export type UpdatePartnerMutationBody = UpdatePartnerBody
    export type UpdatePartnerMutationError = UpdatePartner404

    export const useUpdatePartner = <TError = UpdatePartner404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePartner>>, TError,{id: string;data: UpdatePartnerBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof updatePartner>>,
        TError,
        {id: string;data: UpdatePartnerBody},
        TContext
      > => {

      const mutationOptions = getUpdatePartnerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete a partner
 */
export const deletePartner = (
    id: string,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<DeletePartner200>(
      {url: `http://localhost:3333/partners/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePartnerMutationOptions = <TError = DeletePartner404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePartner>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePartner>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deletePartner'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePartner>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletePartner(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePartnerMutationResult = NonNullable<Awaited<ReturnType<typeof deletePartner>>>
    
    export type DeletePartnerMutationError = DeletePartner404

    export const useDeletePartner = <TError = DeletePartner404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePartner>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePartner>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletePartnerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Create a new DataNegotiation
 */
export const createDataNegotiation = (
    createDataNegotiationBody: CreateDataNegotiationBody,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<CreateDataNegotiation201>(
      {url: `http://localhost:3333/negotiation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDataNegotiationBody, signal
    },
      options);
    }
  


export const getCreateDataNegotiationMutationOptions = <TError = CreateDataNegotiation400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDataNegotiation>>, TError,{data: CreateDataNegotiationBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof createDataNegotiation>>, TError,{data: CreateDataNegotiationBody}, TContext> => {
    
const mutationKey = ['createDataNegotiation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDataNegotiation>>, {data: CreateDataNegotiationBody}> = (props) => {
          const {data} = props ?? {};

          return  createDataNegotiation(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDataNegotiationMutationResult = NonNullable<Awaited<ReturnType<typeof createDataNegotiation>>>
    export type CreateDataNegotiationMutationBody = CreateDataNegotiationBody
    export type CreateDataNegotiationMutationError = CreateDataNegotiation400

    export const useCreateDataNegotiation = <TError = CreateDataNegotiation400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDataNegotiation>>, TError,{data: CreateDataNegotiationBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof createDataNegotiation>>,
        TError,
        {data: CreateDataNegotiationBody},
        TContext
      > => {

      const mutationOptions = getCreateDataNegotiationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Get a list of Negotiation
 */
export const getNegotiation = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<GetNegotiation200Item[]>(
      {url: `http://localhost:3333/negotiation`, method: 'GET', signal
    },
      options);
    }
  

export const getGetNegotiationQueryKey = () => {
    return [`http://localhost:3333/negotiation`] as const;
    }

    
export const getGetNegotiationQueryOptions = <TData = Awaited<ReturnType<typeof getNegotiation>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNegotiation>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNegotiationQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNegotiation>>> = ({ signal }) => getNegotiation(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNegotiation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNegotiationQueryResult = NonNullable<Awaited<ReturnType<typeof getNegotiation>>>
export type GetNegotiationQueryError = unknown


export function useGetNegotiation<TData = Awaited<ReturnType<typeof getNegotiation>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNegotiation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNegotiation>>,
          TError,
          Awaited<ReturnType<typeof getNegotiation>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNegotiation<TData = Awaited<ReturnType<typeof getNegotiation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNegotiation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNegotiation>>,
          TError,
          Awaited<ReturnType<typeof getNegotiation>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNegotiation<TData = Awaited<ReturnType<typeof getNegotiation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNegotiation>>, TError, TData>>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetNegotiation<TData = Awaited<ReturnType<typeof getNegotiation>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNegotiation>>, TError, TData>>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNegotiationQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update a Negotiation
 */
export const updateNegotiation = (
    id: string,
    updateNegotiationBody: UpdateNegotiationBody,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<UpdateNegotiation200>(
      {url: `http://localhost:3333/negotiation/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateNegotiationBody
    },
      options);
    }
  


export const getUpdateNegotiationMutationOptions = <TError = UpdateNegotiation404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateNegotiation>>, TError,{id: string;data: UpdateNegotiationBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof updateNegotiation>>, TError,{id: string;data: UpdateNegotiationBody}, TContext> => {
    
const mutationKey = ['updateNegotiation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateNegotiation>>, {id: string;data: UpdateNegotiationBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateNegotiation(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateNegotiationMutationResult = NonNullable<Awaited<ReturnType<typeof updateNegotiation>>>
    export type UpdateNegotiationMutationBody = UpdateNegotiationBody
    export type UpdateNegotiationMutationError = UpdateNegotiation404

    export const useUpdateNegotiation = <TError = UpdateNegotiation404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateNegotiation>>, TError,{id: string;data: UpdateNegotiationBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateNegotiation>>,
        TError,
        {id: string;data: UpdateNegotiationBody},
        TContext
      > => {

      const mutationOptions = getUpdateNegotiationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete a negotiation
 */
export const deleteNegotiation = (
    id: string,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<DeleteNegotiation200>(
      {url: `http://localhost:3333/negotiation/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteNegotiationMutationOptions = <TError = DeleteNegotiation404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNegotiation>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteNegotiation>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteNegotiation'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteNegotiation>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteNegotiation(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteNegotiationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteNegotiation>>>
    
    export type DeleteNegotiationMutationError = DeleteNegotiation404

    export const useDeleteNegotiation = <TError = DeleteNegotiation404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNegotiation>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteNegotiation>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteNegotiationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Create a new Datacontract
 */
export const createContract = (
    createContractBody: CreateContractBody,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<CreateContract201>(
      {url: `http://localhost:3333/contract`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createContractBody, signal
    },
      options);
    }
  


export const getCreateContractMutationOptions = <TError = CreateContract400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createContract>>, TError,{data: CreateContractBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof createContract>>, TError,{data: CreateContractBody}, TContext> => {
    
const mutationKey = ['createContract'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createContract>>, {data: CreateContractBody}> = (props) => {
          const {data} = props ?? {};

          return  createContract(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateContractMutationResult = NonNullable<Awaited<ReturnType<typeof createContract>>>
    export type CreateContractMutationBody = CreateContractBody
    export type CreateContractMutationError = CreateContract400

    export const useCreateContract = <TError = CreateContract400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createContract>>, TError,{data: CreateContractBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof createContract>>,
        TError,
        {data: CreateContractBody},
        TContext
      > => {

      const mutationOptions = getCreateContractMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Get a list of contract
 */
export const getContract = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<GetContract200Item[]>(
      {url: `http://localhost:3333/contract`, method: 'GET', signal
    },
      options);
    }
  

export const getGetContractQueryKey = () => {
    return [`http://localhost:3333/contract`] as const;
    }

    
export const getGetContractQueryOptions = <TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContractQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContract>>> = ({ signal }) => getContract(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContractQueryResult = NonNullable<Awaited<ReturnType<typeof getContract>>>
export type GetContractQueryError = unknown


export function useGetContract<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContract>>,
          TError,
          Awaited<ReturnType<typeof getContract>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContract<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContract>>,
          TError,
          Awaited<ReturnType<typeof getContract>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContract<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetContract<TData = Awaited<ReturnType<typeof getContract>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContract>>, TError, TData>>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContractQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update a contract
 */
export const updateContract = (
    id: string,
    updateContractBody: UpdateContractBody,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<UpdateContract200>(
      {url: `http://localhost:3333/contract/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateContractBody
    },
      options);
    }
  


export const getUpdateContractMutationOptions = <TError = UpdateContract404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContract>>, TError,{id: string;data: UpdateContractBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof updateContract>>, TError,{id: string;data: UpdateContractBody}, TContext> => {
    
const mutationKey = ['updateContract'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateContract>>, {id: string;data: UpdateContractBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateContract(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateContractMutationResult = NonNullable<Awaited<ReturnType<typeof updateContract>>>
    export type UpdateContractMutationBody = UpdateContractBody
    export type UpdateContractMutationError = UpdateContract404

    export const useUpdateContract = <TError = UpdateContract404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateContract>>, TError,{id: string;data: UpdateContractBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateContract>>,
        TError,
        {id: string;data: UpdateContractBody},
        TContext
      > => {

      const mutationOptions = getUpdateContractMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete a contract
 */
export const deleteContract = (
    id: string,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<DeleteContract200>(
      {url: `http://localhost:3333/contract/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteContractMutationOptions = <TError = DeleteContract404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContract>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteContract>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteContract'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContract>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteContract(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContractMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContract>>>
    
    export type DeleteContractMutationError = DeleteContract404

    export const useDeleteContract = <TError = DeleteContract404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContract>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteContract>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteContractMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Realiza o login do usu√°rio e retorna o token JWT com validade de 60 dias
 */
export const authenticateUser = (
    authenticateUserBody: AuthenticateUserBody,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<AuthenticateUser200>(
      {url: `http://localhost:3333/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authenticateUserBody, signal
    },
      options);
    }
  


export const getAuthenticateUserMutationOptions = <TError = AuthenticateUser401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateUser>>, TError,{data: AuthenticateUserBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof authenticateUser>>, TError,{data: AuthenticateUserBody}, TContext> => {
    
const mutationKey = ['authenticateUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authenticateUser>>, {data: AuthenticateUserBody}> = (props) => {
          const {data} = props ?? {};

          return  authenticateUser(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthenticateUserMutationResult = NonNullable<Awaited<ReturnType<typeof authenticateUser>>>
    export type AuthenticateUserMutationBody = AuthenticateUserBody
    export type AuthenticateUserMutationError = AuthenticateUser401

    export const useAuthenticateUser = <TError = AuthenticateUser401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authenticateUser>>, TError,{data: AuthenticateUserBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof authenticateUser>>,
        TError,
        {data: AuthenticateUserBody},
        TContext
      > => {

      const mutationOptions = getAuthenticateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * List all Users
 */
export const getProfileUser = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<GetProfileUser200Item[]>(
      {url: `http://localhost:3333/users`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProfileUserQueryKey = () => {
    return [`http://localhost:3333/users`] as const;
    }

    
export const getGetProfileUserQueryOptions = <TData = Awaited<ReturnType<typeof getProfileUser>>, TError = GetProfileUser400>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileUser>>, TError, TData>>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProfileUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileUser>>> = ({ signal }) => getProfileUser(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProfileUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProfileUserQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileUser>>>
export type GetProfileUserQueryError = GetProfileUser400


export function useGetProfileUser<TData = Awaited<ReturnType<typeof getProfileUser>>, TError = GetProfileUser400>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileUser>>,
          TError,
          Awaited<ReturnType<typeof getProfileUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProfileUser<TData = Awaited<ReturnType<typeof getProfileUser>>, TError = GetProfileUser400>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProfileUser>>,
          TError,
          Awaited<ReturnType<typeof getProfileUser>>
        > , 'initialData'
      >, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProfileUser<TData = Awaited<ReturnType<typeof getProfileUser>>, TError = GetProfileUser400>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileUser>>, TError, TData>>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProfileUser<TData = Awaited<ReturnType<typeof getProfileUser>>, TError = GetProfileUser400>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProfileUser>>, TError, TData>>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProfileUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update an existing User
 */
export const updateUser = (
    id: string,
    updateUserBody: UpdateUserBody,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<UpdateUser200>(
      {url: `http://localhost:3333/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserBody
    },
      options);
    }
  


export const getUpdateUserMutationOptions = <TError = UpdateUser400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UpdateUserBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UpdateUserBody}, TContext> => {
    
const mutationKey = ['updateUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {id: string;data: UpdateUserBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateUser(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = UpdateUserBody
    export type UpdateUserMutationError = UpdateUser400

    export const useUpdateUser = <TError = UpdateUser400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{id: string;data: UpdateUserBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        {id: string;data: UpdateUserBody},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete an existing User
 */
export const deleteUser = (
    id: string,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<DeleteUser200>(
      {url: `http://localhost:3333/users/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteUserMutationOptions = <TError = DeleteUser400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteUser(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = DeleteUser400

    export const useDeleteUser = <TError = DeleteUser400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUser>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
